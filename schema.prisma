// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts    Post[]
  projects Project[]
  snippets Snippet[]
  movies   Movie[]
  books    Book[]

  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  summary     String?
  content     String
  date        DateTime @default(now())
  lastmod     DateTime @updatedAt
  tags        String[]
  categories  String[]
  images      String[]
  authors     String[]
  draft       Boolean  @default(true)
  featured    Boolean  @default(false)
  canonicalUrl String?
  layout      String?
  bibliography String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@map("posts")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  summary     String?
  content     String
  date        DateTime @default(now())
  lastmod     DateTime @updatedAt
  tags        String[]
  categories  String[]
  images      String[]
  authors     String[]
  draft       Boolean  @default(true)
  featured    Boolean  @default(false)
  layout      String?
  github      String?
  demo        String?
  technologies String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@map("projects")
}

model Snippet {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  summary     String?
  content     String
  date        DateTime @default(now())
  lastmod     DateTime @updatedAt
  tags        String[]
  categories  String[]
  images      String[]
  authors     String[]
  draft       Boolean  @default(true)
  featured    Boolean  @default(false)
  layout      String?
  language    String?
  framework   String?
  difficulty  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@map("snippets")
}

model Movie {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  summary     String?
  content     String
  date        DateTime @default(now())
  lastmod     DateTime @updatedAt
  tags        String[]
  categories  String[]
  images      String[]
  authors     String[]
  draft       Boolean  @default(true)
  featured    Boolean  @default(false)
  layout      String?
  director    String?
  year        Int?
  titleType   String?  // 'movie' or 'tv-series'
  yourRating  Int?
  imdbRating  Float?
  imdbUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@map("movies")
}

model Book {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  summary     String?
  content     String
  date        DateTime @default(now())
  lastmod     DateTime @updatedAt
  tags        String[]
  categories  String[]
  images      String[]
  authors     String[]
  draft       Boolean  @default(true)
  featured    Boolean  @default(false)
  layout      String?
  bookAuthor  String?
  year        Int?
  pageCount   Int?
  userShelves String?
  goodreadsUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@map("books")
}

enum Role {
  USER
  ADMIN
}

enum StatsType {
  blog
  snippet
}

model Stats {
  type      StatsType
  slug      String
  views     Int       @default(0)
  loves     Int       @default(0)
  applauses Int       @default(0)
  ideas     Int       @default(0)
  bullseyes Int       @default(0)

  @@id([type, slug])
  @@map("stats")
}

model Product {
  id               String           @id @default(cuid())
  slug             String           @unique
  name             String
  description      String
  shortDescription String
  price            Float
  salePrice        Float?
  category         String
  tags             String[]
  images           String[]
  featured         Boolean          @default(false)
  inStock          Boolean          @default(true)
  stripeProductId  String?
  stripePriceId    String?
  specifications   Json?
  rating           Float?
  reviewCount      Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  variants ProductVariant[]
  reviews  Review[]

  @@map("products")
}

model ProductVariant {
  id            String  @id @default(cuid())
  name          String
  price         Float
  stripePriceId String?
  attributes    Json    // e.g., { color: "black", size: "L" }
  inStock       Boolean @default(true)

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("product_variants")
}

model Review {
  id       String   @id @default(cuid())
  author   String
  rating   Int
  comment  String
  date     DateTime
  verified Boolean  @default(false)

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("reviews")
}

model GoodreadsBook {
  id                String   @id
  guid              String
  pubDate           String
  title             String
  link              String
  bookImageUrl      String
  bookSmallImageUrl String
  bookMediumImageUrl String
  bookLargeImageUrl String
  bookDescription   String
  authorName        String
  isbn              String?
  userName          String
  userRating        Float
  userReadAt        String?
  userDateAdded     String
  userDateCreated   String
  userShelves       String?
  userReview        String?
  averageRating     Float
  bookPublished     String?
  numPages          Int?
  content           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("goodreads_books")
}

model GoodreadsMovie {
  id            String   @id
  yourRating    Float
  dateRated     String
  title         String
  originalTitle String
  url           String
  titleType     String
  imdbRating    Float
  runtime       Float
  year          String?
  genres        String
  numVotes      Float
  releaseDate   String
  directors     String
  actors        String
  plot          String
  poster        String
  language      String
  country       String
  awards        String
  boxOffice     String?
  totalSeasons  String?
  ratings       Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("goodreads_movies")
}